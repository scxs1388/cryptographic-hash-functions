from random import getrandbits

# Substitude Bytes Box
Sbox = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

# Inverse Substitude Bytes Box
inv_Sbox = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

# Round Constants
Rcon = [
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
    0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
    0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A,
    0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39,
]

# Mix Matrix
mixM = [
    [0x02, 0x03, 0x01, 0x01],
    [0x01, 0x02, 0x03, 0x01],
    [0x01, 0x01, 0x02, 0x03],
    [0x03, 0x01, 0x01, 0x02]
]

# Inverse Mix Matrix
inv_mixM = [
    [0x0e, 0x0b, 0x0d, 0x09],
    [0x09, 0x0e, 0x0b, 0x0d],
    [0x0d, 0x09, 0x0e, 0x0b],
    [0x0b, 0x0d, 0x09, 0x0e]
]

# Transform a 128-bit integer into a 4*4 byte matrix
def num2matrix(num):
    matrix = [[0 for _ in range(4)] for _ in range(4)]
    for i in range(4):
        for j in range(4):
            matrix[i][j] = 0xFF & (num >> ((15 - j - 4 * i) << 3))
    return matrix

# Inverse num2matrix
def matrix2num(matrix):
    num = 0
    for i in range(4):
        for j in range(4):
            num |= matrix[i][j] << ((15 - j - 4 * i) << 3)
    return num

# Transform a 128-bit bytes into an interger 
def byte2num(byte):
    return sum([b << (120 - 8 * i) for i, b in enumerate(byte)])

# Inverse byte2num
def num2byte(num):
    return bytes([0xff & (num >> (120 - 8 * i)) for i in range(16)])

# Transform a bytes into a hex string 
def byte2hex(byte):
    return ''.join([hex(b)[2:].zfill(2) for b in byte])

# Inverse byte2hex
def hex2byte(h):
    return bytes([int(h[i:i + 2], 16) for i in range(0, len(h), 2)])


class AES_ECB128():
    
    def __init__(self, initial_keys):
        # AES128 rounds
        self.rounds = 10
        # Initial round_key
        self.round_keys = num2matrix(initial_keys)
        # key expansion
        self.expand_keys()

    # Expand round keys
    def expand_keys(self):
        # function g
        # 1. word = rol(word, 8)
        # 2. word = Sbox[word]
        # 3. word = word ^ Rcon
        def g(word):
            word = word[1:] + word[:1]
            word = [Sbox[byte] for byte in word]
            word[0] = word[0] ^ Rcon[i // 4]
            return word
        
        # initial round + 10 iteration rounds
        # w[i] = w[i - 4] ^ g(w[i - 1])   i % 4 == 0
        # w[i] = w[i - 4] ^ w[i - 1]      i % 4 != 0
        for i in range(4, 4 * self.rounds + 4):
            key = [0 for _ in range(4)]
            if i % 4 == 0:
                t = g(self.round_keys[i - 1])
                for j in range(4):
                    key[j] = self.round_keys[i - 4][j] ^ t[j]
            else:
                for j in range(4):
                    key[j] = self.round_keys[i - 4][j] ^ self.round_keys[i - 1][j]
            self.round_keys.append(key)

    # Substitute bytes
    def sub_bytes(self, matrix, inverse=False):
        for i in range(4):
            for j in range(4):
                if inverse:
                    matrix[i][j] = inv_Sbox[matrix[i][j]]
                else:
                    matrix[i][j] = Sbox[matrix[i][j]]
        return matrix

    # Shift rows
    def shift_rows(self, matrix, inverse=False):
        matrix_t = list(map(list, zip(*matrix)))
        for i in range(1, 4):
            if inverse:
                matrix_t[i] = matrix_t[i][4 - i:] + matrix_t[i][:4 - i]
            else:
                matrix_t[i] = matrix_t[i][i:] + matrix_t[i][:i]
        return list(map(list, zip(*matrix_t)))

    # Mix Columns
    def mix_columns(self, matrix, inverse=False):
    
        # Polynomials with Coefficients in GF(2^8) (Galois Field)
        def xtime(byte, multiplier):
            _2time = lambda x: (x << 1) & 0xff ^ 0x1b if x & 0x80 else x << 1
            res = 0
            while multiplier > 0:
                if multiplier & 1:
                    res ^= byte
                byte = _2time(byte)
                multiplier >>= 1
            return res

        # Matrix Multiplication
        m_matrix = [[0 for i in range(4)] for j in range(4)]
        for i in range(4):
            for j in range(4):
                for k in range(4):
                    if inverse:
                        m_matrix[i][j] ^= xtime(matrix[i][k], inv_mixM[j][k])
                    else:
                        m_matrix[i][j] ^= xtime(matrix[i][k], mixM[j][k])
        return m_matrix

    # Add round key
    def add_round_key(self, matrix, key):
        for i in range(4):
            for j in range(4):
                matrix[i][j] ^= key[i][j]
        return matrix

    # AES single-block encryption
    def encrypt_single_block(self, plain_num):
        plain_state = self.add_round_key(num2matrix(plain_num), self.round_keys[:4])
        for i in range(1, self.rounds):
            plain_state = self.sub_bytes(plain_state, inverse=False)
            plain_state = self.shift_rows(plain_state, inverse=False)
            plain_state = self.mix_columns(plain_state, inverse=False)
            plain_state = self.add_round_key(plain_state, self.round_keys[4 * i: 4 * i + 4])
        plain_state = self.sub_bytes(plain_state, inverse=False)
        plain_state = self.shift_rows(plain_state, inverse=False)
        plain_state = self.add_round_key(plain_state, self.round_keys[40:])
        cipher_text = matrix2num(plain_state)
        return cipher_text

    # AES single-block decryption
    def decrypt_single_block(self, cipher_num):
        cipher_state = num2matrix(cipher_num)
        cipher_state = self.add_round_key(cipher_state, self.round_keys[40:])
        cipher_state = self.shift_rows(cipher_state, inverse=True)
        cipher_state = self.sub_bytes(cipher_state, inverse=True)
        for i in range(self.rounds - 1, 0, -1):
            cipher_state = self.add_round_key(cipher_state, self.round_keys[4 * i: 4 * i + 4])
            cipher_state = self.mix_columns(cipher_state, inverse=True)
            cipher_state = self.shift_rows(cipher_state, inverse=True)
            cipher_state = self.sub_bytes(cipher_state, inverse=True)
        cipher_state = self.add_round_key(cipher_state, self.round_keys[:4])
        plain_num = matrix2num(cipher_state)
        return plain_num

    # AES encryption main function
    def encrypt(self, plain_text):
        # message encoding
        plain_byte = plain_text.encode(encoding='utf-8')
        # message padding (zero padding)
        plain_byte += b'\x00' * (16 - len(plain_byte) % 16)
        cipher_text = bytes()
        for i in range(len(plain_byte) // 16):
            n = byte2num(plain_byte[i * 16: i * 16 + 16])
            c = self.encrypt_single_block(n)
            cipher_text += num2byte(c)
        return cipher_text

    # AES decryption main function
    def decrypt(self, cipher_byte):
        plain_byte = bytes()
        for i in range(len(cipher_byte) // 16):
            n = byte2num(cipher_byte[i * 16: i * 16 + 16])
            p = self.decrypt_single_block(n)
            plain_byte += num2byte(p)
        # message unpadding
        while plain_byte and plain_byte[-1] == b'\x00'[0]:
            plain_byte = plain_byte[:-1]
        return plain_byte.decode(encoding='utf-8')


if __name__ == "__main__":
    # 128-bit key
    # key = getrandbits(128)
    key = 0x0123456789abcdeffedcba9876543210
    aes_encryptor = AES_ECB128(key)
    # messages
    message1 = '1234567890abcdefghijklmnopqrstuvwxyz'
    # message2 = '2234567890abcdefghijklmnopqrstuvwxyz'
    
    print(f'KEY: {hex(key)[2:]}')
    print(f'Plain Text:   {message1}')
    # Encryption result    
    cipher_text = aes_encryptor.encrypt(message1)
    print(f'Cipher Text:  {byte2hex(cipher_text)}')
    # Decryption result
    plain_text = aes_encryptor.decrypt(cipher_text)
    print(f'Decrypt Text: {plain_text}')

    # print('=' * 100)

    # print(f'Plain Text:   {message2}')
    # # Encryption result    
    # cipher_text = aes_encryptor.encrypt(message2)
    # print(f'Cipher Text:  {byte2hex(cipher_text)}')
    # # Decryption result
    # plain_text = aes_encryptor.decrypt(cipher_text)
    # print(f'Decrypt Text: {plain_text}')
